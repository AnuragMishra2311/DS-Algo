Given a string you need to print the size of the longest possible substring that has exactly K unique characters. 
If there is no possible substring then print -1.


https://practice.geeksforgeeks.org/problems/longest-k-unique-characters-substring0853/1#

Example 1:

Input:
S = "aabacbebebe", K = 3
Output: 7
Explanation: "cbebebe" is the longest 
substring with K distinct characters.

***************************************************************************************************************************


int longestKSubstr(string s, int k) 
    {
        int mp[26]={0}; // Good way to make space complexity O(1) :))
        
        int start=0,end=0,count=0,n=s.size(),maximum=-1;
        
        while(end<n)
        {
            if(mp[s[end]-'a']==0) //Not seen before, then increment count by 1 
            {
                count+=1;
            }
            mp[s[end]-'a']+=1;
            
            if(count==k)
            {
                end+=1;
                while(mp[s[end]-'a']!=0 && end<n) // Increment end until new unique character is not found.
                {
                    mp[s[end]-'a']+=1;
                    end+=1;
                }
                maximum=max(maximum,end-start); 
                while(count==k)  // Incrementing start until one character is eliminated
                {
                    if(mp[s[start]-'a']==1)
                    {
                        count-=1;
                    }
                    mp[s[start]-'a']-=1;
                    start+=1;
                }
                end-=1; // Note:- This is important 
            }
            end+=1;
        }
        return maximum;
}



***************************************************************************************************************************
