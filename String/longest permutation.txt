Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). 
Palindrome string: A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S. Incase of conflict, 
return the substring which occurs first ( with the least starting index ).

NOTE: Required Time Complexity O(n2).

Input:
The first line of input consists number of the testcases. The following T lines consist of a string each.

Output:
In each separate line print the longest palindrome of the string given in the respective test case.

Constraints:
1 ≤ T ≤ 100
1 ≤ Str Length ≤ 104

Example:
Input:
1
aaaabbaa

Output:
aabbaa

Explanation:
Testcase 1: The longest palindrome string present in the given string is "aabbaa".






***************************************************************************************************************************************************************************



def longest_pallindrome(s):
    
    '''Logic: two nested loop, outer one will iterate from left to right and inner will iterate from
    right to left(upto i).If any pallindrome is found and length of same is greater than current
    max length then the max_length and answer values are updated. Finally return the answer.
    '''
    
    len_of_max_pallindrome=0
    answer=s[0] #if we don't have any pallindrome present then first element will be returned
    
    for i in range(len(s)):
        for j in range(len(s)-1,i,-1):
            if s[i:j+1]==str(s[i:j+1])[::-1] and len(s[i:j+1])>len_of_max_pallindrome:
                len_of_max_pallindrome=len(s[i:j+1])
                answer=s[i:j+1]
    return answer
    
    
t=int(input())
while t>0:
    s=input()
    ans=longest_pallindrome(s)
    print(ans)
    t-=1


***************************************************************************************************************************************************************************

