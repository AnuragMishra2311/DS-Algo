You are given two integer arrays nums1 and nums2 both of unique elements, where nums1 is a subset of nums2.

Find all the next greater numbers for nums1's elements in the corresponding places of nums2.

The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, return -1 for this number.



Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation:
For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.
For number 1 in the first array, the next greater number for it in the second array is 3.
For number 2 in the first array, there is no next greater number for it in the second array, so output -1.




LOGIC: Since nums1 is subset of nums2, for every elements in nums2 create a map with element as key and next greater element as value. 
After this we can access these values in O(1) time while traversing through nums1.
*********************************************************************************************************************************************

vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        unordered_map<int,int> mp;
        vector<int>ans;
        int start=0,stop=1;
        
        while(start<nums2.size()-1 && stop<nums2.size()){
            if(nums2[start]<nums2[stop]){
                mp[nums2[start]]=nums2[stop];
                start+=1;
                stop=start+1;
            }
            else{
                stop+=1;
            }
            if(start!=nums2.size()-1 && stop==nums2.size()){
                stop=start+=1;
            }

        }
        
        for(int i=0;i<nums1.size();i++){
            if(mp[nums1[i]]){
                ans.push_back(mp[nums1[i]]);
            }
            else{
                ans.push_back(-1);
            }
        }
        return ans;     
}


*********************************************************************************************************************************************