Leetcode 121

You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

***************************************************************************************************************************************

Idea: Keep track of minimum element in left part of i, and then calculate profit with corresponding element of arr.

Time O(N)
Space O(1)



    int maxProfit(vector<int>& prices) 
    {
        int max_profit=0,min_price=INT_MAX;
        
        int n=prices.size();
        
        for(int i=0;i<n;i++)
        {
            if(prices[i]<min_price)
            {
                min_price=prices[i];
            }
            
            if(prices[i]-min_price>max_profit)
            {
                max_profit=prices[i]-min_price;
            }
        }
        
        return max_profit;
    }


***************************************************************************************************************************************

Idea: Traverse array from RHS and keep track of maximum element. After that Traverse in forward direction and check mp[i] - price[i].

Time O(N)
Space O(N)

    int maxProfit(vector<int>& prices) 
    {
        unordered_map<int,int>mp;
        int current_max=INT_MIN,max_profit=0,i;
        int n=prices.size();

        for(i=n-1;i>=0;i--)
        {
            if(prices[i]>current_max)
            {
                current_max=prices[i];
            }
            mp[i]=current_max;
        }
        
        for(i=0;i<n;i++)
        {
            if(mp[i]-prices[i]>max_profit)
            {
                max_profit=mp[i]-prices[i];
            }
        }
        
        return max_profit;
    }

****************************************************************************************************************************************