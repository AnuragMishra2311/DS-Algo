Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals 
that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

******************************************************************************************************************************************************

Time->>> O(NLogN) 
Space->>O(N)

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        
        intervals.sort()
        i=1
        
        start=intervals[0][0]
        end=intervals[0][1]
        answer=[]
        
        while i<len(intervals):
            if end>=intervals[i][0]:
                end=max(end,intervals[i][1])
            else:
                answer.append([start,end])
                start=intervals[i][0]
                end=intervals[i][1]
            i+=1
        answer.append([start,end])
        return answer



****************************************************************************************************************************************************
Time->>> O(N*N) 
Space->>O(1)



class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        
        intervals.sort()
        i=0
        while i<=len(intervals)-2:
            if intervals[i][1]>=intervals[i+1][0]:
                intervals[i][1]=max(intervals[i+1][1],intervals[i][1])
                intervals.pop(i+1)
            else:
                i+=1
        return intervals