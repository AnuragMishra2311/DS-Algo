Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.


Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).



********************************************************************************************************************************************************************


	int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
	    // code here
	    int row_size=arr.size(),coloumn_size=arr[0].size();
	    int leftmost=coloumn_size,answer=-1;
	    
	    //for first row
	    for(int i=0;i<coloumn_size;i++){
	        if(arr[0][i]==1){
	            leftmost=i;
	            break;
	        }
	    }
	    if(leftmost==0){
	        return 0;
	    }
	    //for rest of the rows
	    for(int i=1;i<row_size;i++)
	    {
	        if(arr[i][leftmost-1]==1){
	            answer=i;
	            leftmost--;
	            while(leftmost>0 && arr[i][leftmost-1]==1){
	                leftmost--;
	            }
	            
	        }
	        else
	        continue;
	    }
	    return answer;
	}


********************************************************************************************************************************************************************