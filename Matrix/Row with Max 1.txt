https://practice.geeksforgeeks.org/problems/row-with-max-1s0023/1#

Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.


Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).


Time Complexity O(m+n)
Space Complexity O(1)

Start traversing coloumn from end(j=m-1), traverse till we don't ecounter 0 (j--). Now check whether next row have 1 or not at that place, if no then No need to traverse.
Proceed to next row and repeat the same.
********************************************************************************************************************************************************************


	int rowWithMax1s(vector<vector<int> > arr, int n, int m) 
	{
	    int current_max=INT_MIN,i,j=m-1,row_with_max_1=-1;
	    for(i=0;i<n;i++)
	    {
	        while(arr[i][j]==1)
	        {
	            j--;
	        }
	        
	        if(j==-1)
	        {
	            return i;
	        }
	        
	        if(m-1-j>current_max && j!=m-1)
	        {
	            current_max=m-1-j;
	            row_with_max_1=i;
	        }
	    }
	    return row_with_max_1;
	}

********************************************************************************************************************************************************************