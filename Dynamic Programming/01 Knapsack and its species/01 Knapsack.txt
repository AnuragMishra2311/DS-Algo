RECURSIVE/MEMOIZATION



int helper(int W, int wt[], int val[], int n,int dp[][1001])
{
       //Base case 
       if(n==0 || W==0)
       {
           return 0;
       }

       if(dp[W][n]!=-1)
       {
           return dp[W][n];
       }

       if(wt[n-1]<=W)
       {
           return dp[W][n]=max(val[n-1]+helper(W-wt[n-1],wt,val,n-1,dp),helper(W,wt,val,n-1,dp));
       }

       else if(wt[n-1]>W)
       {
           return dp[W][n]=helper(W,wt,val,n-1,dp);
       }
}

int knapSack(int W, int wt[], int val[], int n) 
{ 
   int dp[1001][1001];
   memset(dp,-1,sizeof(dp));
   return helper(W,wt,val,n,dp);
}

********************************************************************************************************************************************************************

TABULATION/ITERATIVE



    int knapSack(int W, int wt[], int val[], int n) 
    {
        int dp[n+1][W+1],i,j;
        
        //Initialize with 0 for i=0 and j=0, i.e base case in recursion
        for(i=0;i<n+1;i++)
        {
            for(j=0;j<W+1;j++)
            {
                if(j==0 || i==0)
                {
                    dp[i][j]=0;
                }
            }
        }
        
        // Rest of cases
        for(i=1;i<n+1;i++)
        {
            for(j=1;j<W+1;j++)
            {

                if(wt[i-1]<=j)
                {
                    dp[i][j]=max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
                }
                else
                {
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][W];
    }