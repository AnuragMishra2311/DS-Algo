MEMOIZATION

    

int t[100][10005];
int solve(int N,int arr[], int sum)
{
      if(N==0 && sum!=0)
        {
            return 0;
        }
        if(sum==0)
        {
            return 1;
        }
    
      if(t[N-1][sum]!=-1)
      {
          return t[N-1][sum];
      } 
      if(arr[N-1]<=sum)
      {
          return t[N-1][sum]= solve(N-1,arr,sum-arr[N-1]) ||solve(N-1,arr,sum);
      }
      else
      if(arr[N-1]>sum)
      {
          return t[N-1][sum]=solve(N-1,arr,sum);
      }
 
}


bool isSubsetSum(int N, int arr[], int sum)
{
    
     memset(t,-1,sizeof(t));
     
     if(solve(N,arr,sum))
     {
         return true;
     }
     else
     {
         return false;
     }
}


*************************************************************************************************************************************************************

TABULATION


    bool isSubsetSum(int N, int arr[], int sum)
    {
        
        bool t[N+1][sum+1];
        int i,j;
        
        // Initialization 
        for(i=0;i<N+1;i++)
        {
            for(j=0;j<sum+1;j++)
            {                                
                if(i==0)
                {
                    t[i][j]=false;
                }
                if(j==0)
                {
                    t[i][j]=true;
                }


            }
        }
        
        
        for(i=1;i<N+1;i++)
        {
            for(j=1;j<sum+1;j++)
            {  
                if(arr[i-1]<=j)
                {
                    t[i][j]=t[i-1][j-arr[i-1]] || t[i-1][j];
                }
                else if(arr[i-1]>j)
                {
                    t[i][j]=t[i-1][j];
                }
            }
        }
        return t[N][sum];
    }